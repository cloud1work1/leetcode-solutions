public class Knapsack {

  //O(2^n)
  public int knapsackRecursive(int[] w, int[] v, int n, int W) {
   if(n<=0) {
    return 0;
   } else if(w[n-1]>W) {
    return knapsackRecuresive(w,v, n-1, W);
   } else {
      return Math.max(knapsakRecursive(w,v, n-1, W), v[n-1] + knapsackRecursive(w,v, n-1, W-w[n-1]));
   }
   
  } 
  
  //O(nW)
  public int knapsackdp(int[] w, int[] v, int n, int w) {
    if(n<=0 || W<=0)
      return 0;
      
    int[][] dp = new int[n+1][W+1];
    for(int j=0; j<=W; j++) {
      dp[0][j]=0;
    }
    for(int i=1; i<=n;i++) {
      for(int j=1; j<=W; j++) {
        if(w[i-1]>j) {
          dp[i][j]=dp[i-1][j];
        } else {
          dp[i][j] = Math.max(dp[i-1][j], dp[i-1][j-w[i-1]] + v[i-1]);
        }
      }
    }
    
    return dp[n][W];
  }
}
